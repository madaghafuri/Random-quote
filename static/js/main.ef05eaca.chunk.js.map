{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","color","handleColorChange","bind","this","setState","id","className","onChangeColor","React","Component","QuoteBox","quoteText","quoteAuthor","tweetUrl","currColor","getNewQuote","handleNewQuote","app","fetch","then","response","json","data","index","Math","floor","random","length","text","author","replace","colors","randomColor","onClick","href","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAyBMA,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTC,MAAO,IAET,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBALT,E,qDAQlB,SAAkBF,GAChBG,KAAKC,SAAS,CACZJ,MAAOA,M,oBAIX,WACE,OACE,qBAAKK,GAAG,MAAMC,UAAWH,KAAKJ,MAAMC,MAApC,SACE,cAAC,EAAD,CAAUO,cAAeJ,KAAKF,kBAAmBD,MAAOG,KAAKJ,MAAMC,c,GAlBzDQ,IAAMC,WAwBlBC,E,kDACJ,WAAYZ,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTY,UAAW,GACXC,YAAa,GACbC,SAAU,yCACVC,UAAW,EAAKhB,MAAME,OAExB,EAAKe,YAAc,EAAKA,YAAYb,KAAjB,gBACnB,EAAKc,eAAiB,EAAKA,eAAed,KAApB,gBATN,E,+CAYlB,WACE,IAAMe,EAAMd,KACZe,MAAM,+BACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAC9CV,EAAIb,SAAS,CACXO,UAAWW,EAAKC,GAAOK,KACvBhB,YAAaU,EAAKC,GAAOM,OACzBhB,SAAU,yCAA2CS,EAAKC,GAAOK,KAAKE,QAAQ,KAAM,Y,4BAK1F,WAGE,IAFA,IAAMC,EAAS,CAAC,QAAS,SAAU,MAAO,SAAU,OAAQ,QACxDC,EAAcD,EAAOP,KAAKC,MAAMD,KAAKE,SAAWK,EAAOJ,SACrDK,IAAgB7B,KAAKJ,MAAMe,WAC/BkB,EAAcD,EAAOP,KAAKC,MAAMD,KAAKE,SAAWK,EAAOJ,SAEzDxB,KAAKL,MAAMS,cAAcyB,GACzB7B,KAAKY,gB,oBAGP,WACE,OACE,sBAAKV,GAAG,YAAR,UACE,sBAAKA,GAAG,gBAAR,UACE,qBAAKA,GAAG,OAAR,SAAgBF,KAAKJ,MAAMY,YAC3B,qBAAKN,GAAG,SAAR,SAAkBF,KAAKJ,MAAMa,iBAE/B,wBAAQP,GAAG,YAAY4B,QAAS9B,KAAKa,eAArC,uBACA,mBAAGkB,KAAM/B,KAAKJ,MAAMc,SAAUR,GAAG,cAAc8B,OAAO,SAAtD,8B,GA7Ce3B,IAAMC,WAmDdZ,ICxFAuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ef05eaca.chunk.js","sourcesContent":["\nimport './App.scss';\nimport React from 'react';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      color: ''\n    }\n    this.handleColorChange = this.handleColorChange.bind(this);\n  }\n\n  handleColorChange(color){\n    this.setState({\n      color: color\n    })\n  }\n\n  render(){\n    return(\n      <div id=\"app\" className={this.state.color}>\n        <QuoteBox onChangeColor={this.handleColorChange} color={this.state.color}/>\n      </div>\n    )\n  }\n}\n\nclass QuoteBox extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      quoteText: '',\n      quoteAuthor: '',\n      tweetUrl: 'https://twitter.com/intent/tweet?text=',\n      currColor: this.props.color\n    }\n    this.getNewQuote = this.getNewQuote.bind(this);\n    this.handleNewQuote = this.handleNewQuote.bind(this);\n  }\n\n  getNewQuote(){\n    const app = this;\n    fetch('https://type.fit/api/quotes')\n    .then((response) => response.json())\n    .then((data) => {\n      const index = Math.floor(Math.random() * data.length)\n      app.setState({\n        quoteText: data[index].text,\n        quoteAuthor: data[index].author,\n        tweetUrl: 'https://twitter.com/intent/tweet?text=' + data[index].text.replace(/ /g, '+')\n      })\n    })\n  }\n\n  handleNewQuote(){\n    const colors = ['green', 'orange', 'red', 'purple', 'blue', 'gray'];\n    let randomColor = colors[Math.floor(Math.random() * colors.length)];\n    while(randomColor === this.state.currColor){\n      randomColor = colors[Math.floor(Math.random() * colors.length)];\n    }\n    this.props.onChangeColor(randomColor);\n    this.getNewQuote();\n  }\n\n  render(){\n    return(\n      <div id=\"quote-box\">\n        <div id=\"quote-content\">\n          <div id=\"text\">{this.state.quoteText}</div>\n          <div id=\"author\">{this.state.quoteAuthor}</div>\n        </div>\n        <button id=\"new-quote\" onClick={this.handleNewQuote}>New Quote</button>\n        <a href={this.state.tweetUrl} id=\"tweet-quote\" target=\"_blank\">New tweet</a>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}